# Docker Compose for E-Commerce Analytics Airflow Pipeline

x-airflow-common:
  &airflow-common
  build:
    context: .
    dockerfile: Dockerfile
  image: ecommerce-airflow:latest
  environment: &airflow-common-env
    AIRFLOW__CORE__EXECUTOR: LocalExecutor
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
    AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
    # Add your custom paths
    PYTHONPATH: '/opt/airflow/src:/opt/airflow/dags'
    # Keep your timezone settings
    AIRFLOW__CORE__DEFAULT_TIMEZONE: 'UTC'
    AIRFLOW__WEBSERVER__DEFAULT_UI_TIMEZONE: 'UTC'
    # DO NOT override PATH - let the official image handle it
  volumes:
    # Add back your custom volumes
    - ./airflow_dags:/opt/airflow/dags
    - ./src:/opt/airflow/src:ro
    - ./data:/opt/airflow/data
    - airflow-logs:/opt/airflow/logs
    - airflow-plugins:/opt/airflow/plugins
  user: "${AIRFLOW_UID:-50000}:0"
  depends_on: &airflow-common-depends-on
    postgres:
      condition: service_healthy

services:
  postgres:
    image: postgres:13
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    volumes:
      - postgres-db-volume:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 10s
      retries: 5
      start_period: 5s
    restart: always
    ports:
      - "5432:5432"

  airflow-webserver:
    <<: *airflow-common
    command: webserver
    ports:
      - "8080:8080"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  airflow-scheduler:
    <<: *airflow-common
    command: scheduler
    healthcheck:
      test: ["CMD-SHELL", 'airflow jobs check --job-type SchedulerJob --hostname "$${HOSTNAME}"']
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  airflow-triggerer:
    <<: *airflow-common
    command: triggerer
    healthcheck:
      test: ["CMD-SHELL", 'airflow jobs check --job-type TriggererJob --hostname "$${HOSTNAME}"']
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  airflow-init:
    <<: *airflow-common
    # Use manual user creation approach (working from minimal version)
    command: bash -c "airflow db migrate && airflow users create --username admin --firstname Admin --lastname User --role Admin --email admin@example.com --password admin"
    environment:
      <<: *airflow-common-env
      _AIRFLOW_DB_MIGRATE: 'true'
      # Remove auto-user creation variables - we'll create manually
    # Remove problematic volumes and user overrides for init
    user: "50000:0"
    volumes:
      - ./airflow_dags:/opt/airflow/dags
      - airflow-logs:/opt/airflow/logs

volumes:
  postgres-db-volume:
  airflow-logs:
  airflow-plugins: